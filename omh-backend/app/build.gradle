/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.7/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
	  id 'org.springframework.boot' version '3.4.0'
	  id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.lament.z.omni.mhub'
version = '0.0.1-SNAPSHOT'

repositories {
	maven { url 'https://maven.aliyun.com/repository/public/' }
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {

	// 偷懒
	implementation 'com.google.guava:guava:33.4.0-jre'


	implementation 'org.springdoc:springdoc-openapi-starter-webflux-ui:2.7.0'
	implementation "org.springframework.boot:spring-boot-starter-aop"
	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-r2dbc
	implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
	implementation 'io.asyncer:r2dbc-mysql:1.3.0'
	implementation "org.springframework.boot:spring-boot-starter-validation"
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	// for ReactiveJwt
	implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server"

	// implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	// https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.4'

	// https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.11.4'


}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'com.lament.z.omni.mhub.OmniMediaHubApplication'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}


// usage:  gradle bootRun 默认启动 dev | gradle bootRun -Pspa=prod 指定启动 prod
// 其实就是 ./gradlew bootRun --args='--spring.profiles.active=dev' 的偷懒+缩短版
// spa for spring profiles active =,=
tasks.named('bootRun'){

	if (project.findProperty("spa")){
		args += '--spring.profiles.active=' + project.findProperty("spa")
	}else {
		args += '--spring.profiles.active=dev'
	}

}
